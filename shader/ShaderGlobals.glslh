layout (std140) uniform Camera
{
    mat4x4 g_view;
    mat4x4 g_projection;
    vec4 g_eye;
};

layout (std140) uniform Color
{
    vec4 g_color;
};

const vec3 g_lightPos = vec3( -8, 8, 0);

const float g_ambient = 0;

float saturate(float s)
{
    return clamp(s, 0.0, 1);
}

vec2 getSpecDiffuseCoe(vec3 normal, vec3 eye, vec3 worldPos, vec3 lightPos)
{
    vec3 lightToPos = normalize(worldPos - lightPos);
    
    vec3 posToEye = normalize(eye - worldPos);
    
    vec3 reflectVec = reflect(lightToPos, normal);
    
    float dist = length(lightToPos);
	float t = dist / 10 ;
	//float diffuse = 0.3 * pow(cos(1.57079 * t), 2);
    float diffuse = 0.6f + 0.6f * dot(-lightToPos, normal);

    float specular = pow(saturate(dot(reflectVec, posToEye)), 32);
    
    return vec2(specular, diffuse);
}

vec2 getLight(vec4 fragmentPos, vec3 lightPos, vec3 normal){

    vec3 l = lightPos - fragmentPos.xyz / fragmentPos.w;
    float distSq = dot(l, l);
    float e = 8.0 / (1.0 + distSq);
    l = normalize(l);
    float id = max(0, dot(normal, l));
    
    // --- begin phong
    vec3 v = normalize((g_view*g_eye).xyz - fragmentPos.xyz / fragmentPos.w);
    vec3 r = reflect(-l, normal);
    float is = max(0, pow(dot(v, r), 16));
    
    return vec2(id,is);
}